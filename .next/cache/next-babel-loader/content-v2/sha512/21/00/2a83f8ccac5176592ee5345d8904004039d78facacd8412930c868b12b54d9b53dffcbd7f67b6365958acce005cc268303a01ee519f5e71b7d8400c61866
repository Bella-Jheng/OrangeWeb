{"ast":null,"code":"import { useReducer } from \"react\";\nconst initialValue = {\n  value: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT\":\n      return {\n        value: action.value,\n        isTouched: state.isTouched\n      };\n\n    case \"BLUR\":\n      return {\n        isTouched: true,\n        value: state.value\n      };\n\n    case \"RESET\":\n      return {\n        value: '',\n        isTouched: false\n      };\n\n    default:\n      return;\n  }\n};\n\nconst useInputPractice = validation => {\n  const {\n    0: inputState,\n    1: dispatch\n  } = useReducer(inputStateReducer, initialValue);\n  const {\n    value,\n    isTouched\n  } = inputState;\n  const enterValueIsValid = validation(value);\n  const enterValueIsInvalid = !enterValueIsValid && isTouched;\n\n  const onEnterValueChangeHandler = event => {\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value\n    });\n  };\n\n  const onInputIsTouchedHandler = event => {\n    dispatch({\n      type: \"BLUR\"\n    });\n  };\n\n  const reset = () => {\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n\n  return {\n    enterValue: value,\n    hasError: enterValueIsInvalid,\n    onEnterValueChangeHandler,\n    onInputIsTouchedHandler,\n    reset\n  };\n};\n\nexport default useInputPractice;","map":null,"metadata":{},"sourceType":"module"}