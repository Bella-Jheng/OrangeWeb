{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nvar initialValue = {\n  value: \"\",\n  isTouched: false\n};\n\nvar inputStateReducer = function inputStateReducer(state, action) {\n  switch (action.type) {\n    case \"INPUT\":\n      return {\n        value: action.value,\n        isTouched: state.isTouched\n      };\n\n    case \"BLUR\":\n      return {\n        isTouched: true,\n        value: state.value\n      };\n\n    case \"RESET\":\n      return {\n        value: '',\n        isTouched: false\n      };\n\n    default:\n      return;\n  }\n};\n\nvar useInputPractice = function useInputPractice(validation) {\n  _s();\n\n  var _useReducer = useReducer(inputStateReducer, initialValue),\n      inputState = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var value = inputState.value,\n      isTouched = inputState.isTouched;\n  var enterValueIsValid = validation(value);\n  var enterValueIsInvalid = !enterValueIsValid && isTouched;\n\n  var onEnterValueChangeHandler = function onEnterValueChangeHandler(event) {\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value\n    });\n  };\n\n  var onInputIsTouchedHandler = function onInputIsTouchedHandler(event) {\n    console.log('BLUR');\n    dispatch({\n      type: \"BLUR\"\n    });\n  };\n\n  var reset = function reset() {\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n\n  return {\n    enterValue: value,\n    hasError: enterValueIsInvalid,\n    onEnterValueChangeHandler: onEnterValueChangeHandler,\n    onInputIsTouchedHandler: onInputIsTouchedHandler,\n    reset: reset\n  };\n};\n\n_s(useInputPractice, \"bZ8RWqD1l13G13N6bNvfnKfD0XA=\");\n\nexport default useInputPractice;","map":{"version":3,"sources":["/Users/zhengyiting/ReactProjects/orange-web/hooks/use-input.js"],"names":["useReducer","initialValue","value","isTouched","inputStateReducer","state","action","type","useInputPractice","validation","inputState","dispatch","enterValueIsValid","enterValueIsInvalid","onEnterValueChangeHandler","event","target","onInputIsTouchedHandler","console","log","reset","enterValue","hasError"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAArB;;AAKA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,aAAO;AAAEL,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBC,QAAAA,SAAS,EAAEE,KAAK,CAACF;AAAxC,OAAP;;AACF,SAAK,MAAL;AACE,aAAO;AAAEA,QAAAA,SAAS,EAAE,IAAb;AAAmBD,QAAAA,KAAK,EAAEG,KAAK,CAACH;AAAhC,OAAP;;AACF,SAAK,OAAL;AACE,aAAO;AAAEA,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,SAAS,EAAE;AAAxB,OAAP;;AACF;AACE;AARJ;AAUD,CAXD;;AAYA,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,UAAD,EAAgB;AAAA;;AAAA,oBACRT,UAAU,CAACI,iBAAD,EAAmBH,YAAnB,CADF;AAAA,MAChCS,UADgC;AAAA,MACpBC,QADoB;;AAAA,MAEhCT,KAFgC,GAEbQ,UAFa,CAEhCR,KAFgC;AAAA,MAE1BC,SAF0B,GAEbO,UAFa,CAE1BP,SAF0B;AAIvC,MAAMS,iBAAiB,GAAGH,UAAU,CAACP,KAAD,CAApC;AACA,MAAMW,mBAAmB,GAAG,CAACD,iBAAD,IAAsBT,SAAlD;;AAEA,MAAMW,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,KAAD,EAAW;AAC3CJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,OAAR;AAAiBL,MAAAA,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad;AAArC,KAAD,CAAR;AACD,GAFD;;AAGA,MAAMe,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACF,KAAD,EAAW;AACvCG,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACFR,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAHD;;AAIA,MAAMa,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClBT,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,SAAO;AACLc,IAAAA,UAAU,EAAGnB,KADR;AAELoB,IAAAA,QAAQ,EAAET,mBAFL;AAGLC,IAAAA,yBAAyB,EAAzBA,yBAHK;AAILG,IAAAA,uBAAuB,EAAvBA,uBAJK;AAKLG,IAAAA,KAAK,EAALA;AALK,GAAP;AAOD,CAzBD;;GAAMZ,gB;;AA2BN,eAAeA,gBAAf","sourcesContent":["import { useReducer } from \"react\";\n\nconst initialValue = {\n  value: \"\",\n  isTouched: false,\n};\n\nconst inputStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT\":\n      return { value: action.value, isTouched: state.isTouched };\n    case \"BLUR\":\n      return { isTouched: true, value: state.value };\n    case \"RESET\":\n      return { value: '', isTouched: false };\n    default:\n      return;\n  }\n};\nconst useInputPractice = (validation) => {\n  const [inputState, dispatch] = useReducer(inputStateReducer,initialValue);\n  const {value,isTouched} = inputState\n\n  const enterValueIsValid = validation(value);\n  const enterValueIsInvalid = !enterValueIsValid && isTouched;\n\n  const onEnterValueChangeHandler = (event) => {\n    dispatch({ type: \"INPUT\", value: event.target.value });\n  };\n  const onInputIsTouchedHandler = (event) => {\n      console.log('BLUR')\n    dispatch({ type: \"BLUR\" });\n  };\n  const reset = () => {\n    dispatch({ type: \"RESET\" });\n  };\n\n  return {\n    enterValue : value,\n    hasError: enterValueIsInvalid,\n    onEnterValueChangeHandler,\n    onInputIsTouchedHandler,\n    reset,\n  };\n};\n\nexport default useInputPractice;\n"]},"metadata":{},"sourceType":"module"}