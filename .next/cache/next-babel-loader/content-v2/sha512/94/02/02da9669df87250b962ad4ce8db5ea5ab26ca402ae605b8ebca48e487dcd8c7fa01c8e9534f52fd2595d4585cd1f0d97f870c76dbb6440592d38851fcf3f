{"ast":null,"code":"import { cartActions } from \"./cart-slice\";\nimport useHttp from \"../hooks/use-http\";\nconst url = \"https://react-http-3d73c-default-rtdb.firebaseio.com/orangecart.json\"; //read\n\nexport const fetchingCartData = () => {\n  //會自動 export action({type:'addToCart',ammount:1}) 也可以直接export方法出去\n  // const { isLoading, error, sendRequest } = useHttp();\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(url);\n\n      if (!response.ok) {\n        throw new Error(\"Fetching data failed!\");\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const fetchingData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        items: data.items || [],\n        totalQuantity: data.totalQuantity,\n        totalPrice: data.totalPrice\n      })); //當物件全刪，firebase totalQuantity=0 items 會消失，重刷執行replaceCart會map不到items，因此給預設值空[]\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n}; //update\n\nexport const sendingCartData = cartData => {\n  // const { isLoading, error, sendRequest } = useHttp();\n  return async dispatch => {\n    const sendingCart = async () => {\n      const response = await fetch(url, {\n        method: \"PUT\",\n        //put=override, post=add\n        body: JSON.stringify({\n          items: cartData.items,\n          totalQuantity: cartData.totalQuantity,\n          totalPrice: cartData.totalPrice\n        }) //avoid the property 'isChanged'\n\n      });\n\n      if (!response.ok) {\n        console.log(\"Request failed\");\n      }\n    };\n\n    try {\n      await sendingCart();\n    } catch (error) {\n      console.log(\"Request failed\");\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}