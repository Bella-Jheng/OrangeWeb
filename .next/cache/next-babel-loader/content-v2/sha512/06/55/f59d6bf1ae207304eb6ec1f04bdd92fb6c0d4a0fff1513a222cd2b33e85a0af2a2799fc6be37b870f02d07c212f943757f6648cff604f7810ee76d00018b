{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalPrice: 0,\n    isChange: false\n  },\n  reducers: {\n    //read\n    replaceCart: function replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    //edit+add\n    addToCart: function addToCart(state, action) {\n      var newItem = action.payload;\n      var existingItem = state.items.find(function (item) {\n        return item.id == newItem.id;\n      });\n      state.isChange = true;\n      state.totalQuantity = state.totalQuantity + newItem.quantity;\n      state.totalPrice = state.totalPrice + newItem.quantity * newItem.price;\n      var pushItem = !existingItem;\n\n      if (existingItem && existingItem.size !== newItem.size) {\n        pushItem = true;\n      }\n\n      if (pushItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.name,\n          img: newItem.img,\n          price: newItem.price,\n          size: newItem.size,\n          quantity: newItem.quantity,\n          totalPrice: newItem.price * newItem.quantity\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + newItem.quantity;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price * newItem.quantity;\n      }\n    },\n    //delete\n    removeFromCart: function removeFromCart(state, action) {\n      var newItem = action.payload;\n      state.isChange = true;\n      var existingItem = state.items.find(function (item) {\n        return item.id === newItem.id;\n      }); // if(newItem.size){\n      //   existingItem = existingItem.find(item => item.size == newItem.size);\n      // }\n\n      if (existingItem) {\n        state.items = state.items.filter(function (item) {\n          return item.id !== newItem.id;\n        });\n        state.totalQuantity = state.totalQuantity - existingItem.quantity;\n        state.totalPrice = state.totalPrice - existingItem.quantity * existingItem.price;\n      } else {\n        state.items = [];\n        state.totalQuantity = 0;\n        state.totalPrice = 0;\n      }\n    }\n  }\n});\nexport var cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/zhengyiting/ReactProjects/orange-web/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","totalPrice","isChange","reducers","replaceCart","state","action","payload","addToCart","newItem","existingItem","find","item","id","quantity","price","pushItem","size","push","img","removeFromCart","filter","cartActions","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: { items: [], totalQuantity: 0, totalPrice: 0, isChange: false },\n  reducers: {\n    //read\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    //edit+add\n    addToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find((item) => item.id == newItem.id);\n      state.isChange = true;\n      state.totalQuantity = state.totalQuantity + newItem.quantity;\n      state.totalPrice = state.totalPrice + newItem.quantity * newItem.price;\n\n      let pushItem = !existingItem;\n      if (existingItem && existingItem.size !== newItem.size) {\n        pushItem = true;\n      }\n\n      if (pushItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.name,\n          img: newItem.img,\n          price: newItem.price,\n          size: newItem.size,\n          quantity: newItem.quantity,\n          totalPrice: newItem.price * newItem.quantity,\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + newItem.quantity;\n        existingItem.totalPrice =\n          existingItem.totalPrice + newItem.price * newItem.quantity;\n      }\n    },\n\n    //delete\n    removeFromCart(state, action) {\n      const newItem = action.payload;\n      state.isChange = true;\n      let existingItem = state.items.find((item) => item.id === newItem.id);\n      // if(newItem.size){\n      //   existingItem = existingItem.find(item => item.size == newItem.size);\n      // }\n      if (existingItem) {\n        state.items = state.items.filter((item) => item.id !== newItem.id);\n        state.totalQuantity = state.totalQuantity - existingItem.quantity;\n        state.totalPrice =\n          state.totalPrice - existingItem.quantity * existingItem.price;\n      } else {\n        state.items = [];\n        state.totalQuantity = 0;\n        state.totalPrice = 0;\n      }\n    },\n  },\n});\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}