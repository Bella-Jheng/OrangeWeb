{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useCallback, useEffect } from \"react\";\nimport AuthContext from \"./auth-context\";\nvar loginTimer;\n\nvar cauculateRemainTime = function cauculateRemainTime(expiration) {\n  var currentTime = new Date().getTime();\n  var expirationTime = new Date(expiration).getTime();\n  var remainingTime = expirationTime - currentTime;\n  return remainingTime;\n};\n\nvar storeToken = function storeToken() {\n  var token = localStorage.getItem(\"token\");\n  var expirationTime = localStorage.getItem(\"expirationTime\");\n  var remainingTime = cauculateRemainTime(expirationTime); //登入時間超過1小時，登出\n\n  if (remainingTime <= 600000) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  }\n\n  return {\n    token: token,\n    remainingTime: remainingTime\n  };\n};\n\nvar AuthContextProvider = function AuthContextProvider(props) {\n  //每render一次，重新計算過期時間\n  //回傳token,remainingTime\n  var tokenData;\n  var initialToken;\n  useEffect(function () {\n    tokenData = storeToken();\n\n    if (tokenData) {\n      initialToken = localStorage.getItem(\"token\");\n    }\n  }, []);\n\n  var _useState = useState(initialToken),\n      token = _useState[0],\n      setToken = _useState[1];\n\n  var isLogin = !!token; //isString && empty    -> false\n  //isString && notEmpty -> true\n\n  var logout = useCallback(function () {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n\n    if (loginTimer) {\n      clearTimeout(loginTimer);\n    }\n  }, []);\n\n  var login = function login(userToken, expirationTime) {\n    //expirationTime 過期時間 = firebase 過期時間\n    setToken(userToken);\n    localStorage.setItem(\"token\", userToken);\n    localStorage.setItem(\"expirationTime\", expirationTime); //倒數計時，時間到執行登出\n\n    loginTimer = setTimeout(logout, cauculateRemainTime(expirationTime));\n  }; //重新render時重刷剩餘時間\n\n\n  useEffect(function () {\n    if (tokenData) {\n      loginTimer = setTimeout(logout, tokenData.remainingTime);\n    }\n  }, [tokenData, logout]);\n  var authContext = {\n    token: token,\n    isLogin: isLogin,\n    login: login,\n    logout: logout\n  };\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: authContext,\n    children: props.children\n  });\n};\n\nexport default AuthContextProvider;","map":null,"metadata":{},"sourceType":"module"}