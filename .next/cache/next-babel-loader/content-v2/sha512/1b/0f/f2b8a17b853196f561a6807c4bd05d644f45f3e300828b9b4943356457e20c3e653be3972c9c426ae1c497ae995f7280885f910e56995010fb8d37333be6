{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    isChange: false\n  },\n  reducers: {\n    //read\n    replaceCart: function replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    //edit+add\n    addToCart: function addToCart(state, action) {\n      var newItem = action.payload;\n      var existingItem = state.items.find(function (item) {\n        return item.id == newItem.id;\n      });\n      state.isChange = true;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.name,\n          img: newItem.img,\n          price: newItem.price,\n          size: newItem.size ? newItem.size : null,\n          quality: newItem.quality,\n          totalPrice: newItem.price * newItem.quality\n        });\n        state.totalQuantity = newItem.quality;\n      } else {\n        existingItem.quality = existingItem.quality + newItem.quality;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price * newItem.quality;\n        existingItem.totalQuantity = existingItem.totalQuantity + newItem.quality;\n      }\n    },\n    //delete\n    removeFromCart: function removeFromCart(state, action) {\n      var newItemId = action.payload;\n      state.items = state.items.find(function (item) {\n        return item.id !== newItemId;\n      });\n    }\n  }\n});\nexport var cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/zhengyiting/ReactProjects/orange-web/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","isChange","reducers","replaceCart","state","action","payload","addToCart","newItem","existingItem","find","item","id","push","img","price","size","quality","totalPrice","removeFromCart","newItemId","cartActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,IAAMC,SAAS,GAAGD,WAAW,CAAC;AAC5BE,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AAAEC,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,aAAa,EAAE,CAA5B;AAA+BC,IAAAA,QAAQ,EAAE;AAAzC,GAFc;AAG5BC,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,WAFQ,uBAEIC,KAFJ,EAEWC,MAFX,EAEmB;AACzBD,MAAAA,KAAK,CAACJ,aAAN,GAAsBK,MAAM,CAACC,OAAP,CAAeN,aAArC;AACAI,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAAP,CAAeP,KAA7B;AACD,KALO;AAMR;AACAQ,IAAAA,SAPQ,qBAOEH,KAPF,EAOSC,MAPT,EAOiB;AACvB,UAAMG,OAAO,GAAGH,MAAM,CAACC,OAAvB;AACA,UAAMG,YAAY,GAAGL,KAAK,CAACL,KAAN,CAAYW,IAAZ,CAAiB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,EAAL,IAAWJ,OAAO,CAACI,EAA7B;AAAA,OAAjB,CAArB;AACAR,MAAAA,KAAK,CAACH,QAAN,GAAiB,IAAjB;;AAEA,UAAI,CAACQ,YAAL,EAAmB;AACjBL,QAAAA,KAAK,CAACL,KAAN,CAAYc,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADG;AAEff,UAAAA,IAAI,EAAEW,OAAO,CAACX,IAFC;AAGfiB,UAAAA,GAAG,EAAEN,OAAO,CAACM,GAHE;AAIfC,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAJA;AAKfC,UAAAA,IAAI,EAAER,OAAO,CAACQ,IAAR,GAAeR,OAAO,CAACQ,IAAvB,GAA8B,IALrB;AAMfC,UAAAA,OAAO,EAAET,OAAO,CAACS,OANF;AAOfC,UAAAA,UAAU,EAAEV,OAAO,CAACO,KAAR,GAAgBP,OAAO,CAACS;AAPrB,SAAjB;AASAb,QAAAA,KAAK,CAACJ,aAAN,GAAsBQ,OAAO,CAACS,OAA9B;AACD,OAXD,MAWO;AACLR,QAAAA,YAAY,CAACQ,OAAb,GAAuBR,YAAY,CAACQ,OAAb,GAAuBT,OAAO,CAACS,OAAtD;AACAR,QAAAA,YAAY,CAACS,UAAb,GACET,YAAY,CAACS,UAAb,GAA0BV,OAAO,CAACO,KAAR,GAAgBP,OAAO,CAACS,OADpD;AAEAR,QAAAA,YAAY,CAACT,aAAb,GACES,YAAY,CAACT,aAAb,GAA6BQ,OAAO,CAACS,OADvC;AAED;AACF,KA9BO;AAgCR;AACAE,IAAAA,cAjCQ,0BAiCOf,KAjCP,EAiCcC,MAjCd,EAiCsB;AAC5B,UAAMe,SAAS,GAAGf,MAAM,CAACC,OAAzB;AACAF,MAAAA,KAAK,CAACL,KAAN,GAAcK,KAAK,CAACL,KAAN,CAAYW,IAAZ,CAAiB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,EAAL,KAAYQ,SAAtB;AAAA,OAAjB,CAAd;AACD;AApCO;AAHkB,CAAD,CAA7B;AA2CA,OAAO,IAAMC,WAAW,GAAGzB,SAAS,CAAC0B,OAA9B;AACP,eAAe1B,SAAS,CAAC2B,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: { items: [], totalQuantity: 0, isChange: false },\n  reducers: {\n    //read\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    //edit+add\n    addToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find((item) => item.id == newItem.id);\n      state.isChange = true;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.name,\n          img: newItem.img,\n          price: newItem.price,\n          size: newItem.size ? newItem.size : null,\n          quality: newItem.quality,\n          totalPrice: newItem.price * newItem.quality,\n        });\n        state.totalQuantity = newItem.quality;\n      } else {\n        existingItem.quality = existingItem.quality + newItem.quality;\n        existingItem.totalPrice =\n          existingItem.totalPrice + newItem.price * newItem.quality;\n        existingItem.totalQuantity =\n          existingItem.totalQuantity + newItem.quality;\n      }\n    },\n    \n    //delete\n    removeFromCart(state, action) {\n      const newItemId = action.payload;\n      state.items = state.items.find((item) => item.id !== newItemId);\n    },\n  },\n});\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}