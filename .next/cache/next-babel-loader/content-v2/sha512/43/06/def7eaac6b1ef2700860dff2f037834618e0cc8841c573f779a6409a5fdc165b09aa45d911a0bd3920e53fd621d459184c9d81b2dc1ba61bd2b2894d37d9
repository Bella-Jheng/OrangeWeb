{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useCallback, useEffect } from \"react\";\nimport AuthContext from \"./auth-context\";\nlet loginTimer;\n\nconst cauculateRemainTime = expiration => {\n  const currentTime = new Date().getTime();\n  const expirationTime = new Date(expiration).getTime();\n  const remainingTime = expirationTime - currentTime;\n  return remainingTime;\n};\n\nconst storeToken = () => {\n  const token = localStorage.getItem(\"token\");\n  const expirationTime = localStorage.getItem(\"expirationTime\");\n  let remainingTime = cauculateRemainTime(expirationTime); //登入時間超過1小時，登出\n\n  if (remainingTime <= 600000) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  }\n\n  return {\n    token,\n    remainingTime\n  };\n};\n\nconst AuthContextProvider = props => {\n  //每render一次，重新計算過期時間\n  //回傳token,remainingTime\n  let tokenData;\n  let initialToken;\n  useEffect(() => {\n    tokenData = storeToken();\n\n    if (tokenData) {\n      initialToken = localStorage.getItem(\"token\");\n    }\n  }, []);\n  const {\n    0: token,\n    1: setToken\n  } = useState(initialToken);\n  const isLogin = !!token; //isString && empty    -> false\n  //isString && notEmpty -> true\n\n  const logout = useCallback(() => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n\n    if (loginTimer) {\n      clearTimeout(loginTimer);\n    }\n  }, []);\n\n  const login = (userToken, expirationTime) => {\n    //expirationTime 過期時間 = firebase 過期時間\n    setToken(userToken);\n    localStorage.setItem(\"token\", userToken);\n    localStorage.setItem(\"expirationTime\", expirationTime); //倒數計時，時間到執行登出\n\n    loginTimer = setTimeout(logout, cauculateRemainTime(expirationTime));\n  }; //重新render時重刷剩餘時間\n\n\n  useEffect(() => {\n    if (tokenData) {\n      loginTimer = setTimeout(logout, tokenData.remainingTime);\n    }\n  }, [tokenData, logout]);\n  const authContext = {\n    token,\n    isLogin,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: authContext,\n    children: props.children\n  });\n};\n\nexport default AuthContextProvider;","map":null,"metadata":{},"sourceType":"module"}