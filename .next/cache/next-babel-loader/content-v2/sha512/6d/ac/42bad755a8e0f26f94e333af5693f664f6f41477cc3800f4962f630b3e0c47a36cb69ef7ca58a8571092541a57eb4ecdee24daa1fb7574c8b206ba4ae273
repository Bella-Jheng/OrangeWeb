{"ast":null,"code":"import { useReducer } from \"react\";\nconst initialValue = {\n  value: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT\":\n      return {\n        value: action.value,\n        isTouched: state.isTouched\n      };\n\n    case \"BLUR\":\n      return {\n        isTouched: true,\n        value: state.value\n      };\n\n    case \"RESET\":\n      return {\n        value: '',\n        isTouched: false\n      };\n\n    default:\n      return;\n  }\n};\n\nconst useInputPractice = validation => {\n  const {\n    0: inputState,\n    1: dispatch\n  } = useReducer(inputStateReducer, initialValue);\n  const {\n    value,\n    isTouched\n  } = inputState;\n  const enterValueIsValid = validation(value);\n  const enterValueIsInvalid = !enterValueIsValid && isTouched;\n  console.log('isValid' + enterValueIsValid);\n  console.log('invalid' + enterValueIsInvalid);\n\n  const onEnterValueChangeHandler = event => {\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value\n    });\n  };\n\n  const onInputIsTouchedHandler = event => {\n    dispatch({\n      type: \"BLUR\"\n    });\n  };\n\n  const reset = () => {\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n\n  return {\n    enterValue: value,\n    enterValueIsValid,\n    hasError: enterValueIsInvalid,\n    onEnterValueChangeHandler,\n    onInputIsTouchedHandler,\n    reset\n  };\n};\n\nexport default useInputPractice;","map":{"version":3,"sources":["/Users/zhengyiting/ReactProjects/orange-web/hooks/use-input.js"],"names":["useReducer","initialValue","value","isTouched","inputStateReducer","state","action","type","useInputPractice","validation","inputState","dispatch","enterValueIsValid","enterValueIsInvalid","console","log","onEnterValueChangeHandler","event","target","onInputIsTouchedHandler","reset","enterValue","hasError"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,SAAS,EAAE;AAFQ,CAArB;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,aAAO;AAAEL,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBC,QAAAA,SAAS,EAAEE,KAAK,CAACF;AAAxC,OAAP;;AACF,SAAK,MAAL;AACE,aAAO;AAAEA,QAAAA,SAAS,EAAE,IAAb;AAAmBD,QAAAA,KAAK,EAAEG,KAAK,CAACH;AAAhC,OAAP;;AACF,SAAK,OAAL;AACE,aAAO;AAAEA,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,SAAS,EAAE;AAAxB,OAAP;;AACF;AACE;AARJ;AAUD,CAXD;;AAYA,MAAMK,gBAAgB,GAAIC,UAAD,IAAgB;AACvC,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAAyBX,UAAU,CAACI,iBAAD,EAAmBH,YAAnB,CAAzC;AACA,QAAM;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,MAAoBO,UAA1B;AAEA,QAAME,iBAAiB,GAAGH,UAAU,CAACP,KAAD,CAApC;AACA,QAAMW,mBAAmB,GAAG,CAACD,iBAAD,IAAsBT,SAAlD;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAWH,iBAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,mBAAxB;;AAEA,QAAMG,yBAAyB,GAAIC,KAAD,IAAW;AAC3CN,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,OAAR;AAAiBL,MAAAA,KAAK,EAAEe,KAAK,CAACC,MAAN,CAAahB;AAArC,KAAD,CAAR;AACD,GAFD;;AAGA,QAAMiB,uBAAuB,GAAIF,KAAD,IAAW;AACzCN,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD;;AAGA,QAAMa,KAAK,GAAG,MAAM;AAClBT,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,SAAO;AACLc,IAAAA,UAAU,EAAGnB,KADR;AAELU,IAAAA,iBAFK;AAGLU,IAAAA,QAAQ,EAAET,mBAHL;AAILG,IAAAA,yBAJK;AAKLG,IAAAA,uBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CA5BD;;AA8BA,eAAeZ,gBAAf","sourcesContent":["import { useReducer } from \"react\";\n\nconst initialValue = {\n  value: \"\",\n  isTouched: false,\n};\n\nconst inputStateReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT\":\n      return { value: action.value, isTouched: state.isTouched };\n    case \"BLUR\":\n      return { isTouched: true, value: state.value };\n    case \"RESET\":\n      return { value: '', isTouched: false };\n    default:\n      return;\n  }\n};\nconst useInputPractice = (validation) => {\n  const [inputState, dispatch] = useReducer(inputStateReducer,initialValue);\n  const {value,isTouched} = inputState\n\n  const enterValueIsValid = validation(value);\n  const enterValueIsInvalid = !enterValueIsValid && isTouched;\n\n  console.log('isValid'+ enterValueIsValid)\n  console.log('invalid' + enterValueIsInvalid)\n\n  const onEnterValueChangeHandler = (event) => {\n    dispatch({ type: \"INPUT\", value: event.target.value });\n  };\n  const onInputIsTouchedHandler = (event) => {\n    dispatch({ type: \"BLUR\" });\n  };\n  const reset = () => {\n    dispatch({ type: \"RESET\" });\n  };\n\n  return {\n    enterValue : value,\n    enterValueIsValid,\n    hasError: enterValueIsInvalid,\n    onEnterValueChangeHandler,\n    onInputIsTouchedHandler,\n    reset,\n  };\n};\n\nexport default useInputPractice;\n"]},"metadata":{},"sourceType":"module"}