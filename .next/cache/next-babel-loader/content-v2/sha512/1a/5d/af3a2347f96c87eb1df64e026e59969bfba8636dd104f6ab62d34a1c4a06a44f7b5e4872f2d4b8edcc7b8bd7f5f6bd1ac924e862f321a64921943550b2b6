{"ast":null,"code":"import { useReducer } from \"react\";\nvar initialValue = {\n  value: \"\",\n  isTouched: false\n};\n\nvar inputStateReducer = function inputStateReducer(state, action) {\n  switch (action.type) {\n    case \"INPUT\":\n      return {\n        value: action.value,\n        isTouched: state.isTouched\n      };\n\n    case \"BLUR\":\n      return {\n        isTouched: true,\n        value: state.value\n      };\n\n    case \"RESET\":\n      return {\n        value: '',\n        isTouched: false\n      };\n\n    default:\n      return;\n  }\n};\n\nvar useInputPractice = function useInputPractice(validation) {\n  var _useReducer = useReducer(inputStateReducer, initialValue),\n      inputState = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var value = inputState.value,\n      isTouched = inputState.isTouched;\n  var enterValueIsValid = validation(value);\n  var enterValueIsInvalid = !enterValueIsValid && isTouched;\n\n  var onEnterValueChangeHandler = function onEnterValueChangeHandler(event) {\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value\n    });\n  };\n\n  var onInputIsTouchedHandler = function onInputIsTouchedHandler(event) {\n    dispatch({\n      type: \"BLUR\"\n    });\n  };\n\n  var reset = function reset() {\n    dispatch({\n      type: \"RESET\"\n    });\n  };\n\n  return {\n    enterValue: value,\n    hasError: enterValueIsInvalid,\n    onEnterValueChangeHandler: onEnterValueChangeHandler,\n    onInputIsTouchedHandler: onInputIsTouchedHandler,\n    reset: reset\n  };\n};\n\nexport default useInputPractice;","map":null,"metadata":{},"sourceType":"module"}